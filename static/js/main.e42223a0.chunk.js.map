{"version":3,"sources":["graphql/queries.ts","components/layout/header.tsx","components/language.tsx","components/country.tsx","components/countries.tsx","components/layout/index.tsx","App.tsx","reportWebVitals.ts","graphql/client.ts","index.tsx"],"names":["GET_CONTINENTS","gql","GET_COUNTRIES","GET_COUNTRY","Header","useQuery","data","continents","style","position","zIndex","width","className","theme","mode","defaultSelectedKeys","map","continent","Item","to","code","name","FullWidthTag","styled","Tag","Language","colors","index","length","color","Country","variables","loading","active","country","title","column","bordered","label","capital","currency","phone","grid","gutter","dataSource","languages","renderItem","language","states","state","Text","ellipsis","Countries","columns","dataIndex","key","render","_","icon","EyeOutlined","onClick","setCountryCode","setVisibility","useParams","countries","useState","countryCode","visibility","visible","footer","onCancel","Content","Layout","Footer","FullHeightLayout","PaddedContent","Background","div","CenteredFooter","AppLayout","basename","process","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.e42223a0.chunk.js","sourcesContent":["import {gql} from \"@apollo/client\";\r\n\r\nexport const GET_CONTINENTS = gql`\r\n      query getContinents {\r\n          continents{\r\n            code\r\n            name\r\n          }\r\n        }\r\n    `;\r\n\r\nexport const GET_COUNTRIES = gql`\r\n      query getCountries($continent: String) {\r\n          countries(filter: { continent: { eq: $continent }}){\r\n              code\r\n              name\r\n              native\r\n              phone\r\n              currency\r\n              capital\r\n              languages{\r\n                code\r\n                name\r\n              }\r\n          }\r\n      }\r\n    `;\r\n\r\nexport const GET_COUNTRY = gql`\r\n      query getCountry($code: ID!) {\r\n          country(code: $code){\r\n              code\r\n              name\r\n              native\r\n              phone\r\n              currency\r\n              capital\r\n              languages{\r\n                code\r\n                name\r\n              }\r\n              continent{\r\n                code\r\n                name\r\n              }\r\n              states{\r\n                code\r\n                name\r\n              }\r\n          }\r\n      }\r\n`;\r\n","import {Layout, Menu} from \"antd\";\r\nimport React from \"react\";\r\nimport {useQuery} from \"@apollo/client\";\r\nimport {GET_CONTINENTS} from \"../../graphql/queries\";\r\nimport {IContinent} from \"../../interfaces\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport function Header() {\r\n    const {data = {continents: []}} = useQuery<{ continents: IContinent[] }>(GET_CONTINENTS);\r\n\r\n    const {continents} = data;\r\n\r\n    return (\r\n        <Layout.Header style={{position: 'fixed', zIndex: 1, width: '100%'}}>\r\n            <div className=\"logo\"/>\r\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                {\r\n                    continents.map(continent => (\r\n                        <Menu.Item key={continent.code}>\r\n                            <Link to={'/continent/' + continent.code}>\r\n                                {continent.name}\r\n                            </Link>\r\n                        </Menu.Item>\r\n                    ))\r\n                }\r\n            </Menu>\r\n        </Layout.Header>\r\n    )\r\n}\r\n","import {Tag} from \"antd\";\r\nimport React from \"react\";\r\nimport {ILanguage} from \"../interfaces\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FullWidthTag = styled(Tag)`\r\n    width: 100%;\r\n    text-align: center;\r\n    min-width: 0;\r\n`;\r\n\r\nexport function Language({name, code}: ILanguage) {\r\n    const colors = ['geekblue', 'green', 'volcano', 'magenta', 'purple'];\r\n    const index = name.length % colors.length;\r\n\r\n    return (\r\n        <div>\r\n            <FullWidthTag color={colors[index]} key={code}>\r\n                {name}\r\n            </FullWidthTag>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {Descriptions, Empty, List, Skeleton, Tag, Typography} from \"antd\";\r\nimport {ICountry} from \"../interfaces\";\r\nimport {useQuery} from \"@apollo/client\";\r\nimport {GET_COUNTRY} from \"../graphql/queries\";\r\nimport styled from \"styled-components\";\r\nimport {Language} from \"./language\";\r\n\r\nconst FullWidthTag = styled(Tag)`\r\n    width: 100%;\r\n    text-align: center;\r\n    \r\n    span {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport function Country({code = \"\"}) {\r\n    const {loading, data} = useQuery<{ country: ICountry }>(GET_COUNTRY, {variables: {code}});\r\n\r\n    if (loading) return <Skeleton active/>\r\n\r\n    if (!(data && data.country)) return <Empty/>;\r\n\r\n    const {country} = data;\r\n\r\n    return (\r\n        <Descriptions title={`${country.name} Details`} column={1} bordered>\r\n            <Descriptions.Item label=\"Name\">{country?.name}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Capital\">{country?.capital}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Currency\">{country?.currency}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Phone\">{country?.phone}</Descriptions.Item>\r\n            <Descriptions.Item label=\"Languages\">\r\n                <List\r\n                    grid={{gutter: 8, column: 2}}\r\n                    dataSource={country?.languages}\r\n                    renderItem={language => (\r\n                        <List.Item>\r\n                            <Language {...language}/>\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label=\"States\">\r\n                <List\r\n                    grid={{gutter: 8, column: 2}}\r\n                    dataSource={country?.states}\r\n                    renderItem={state => (\r\n                        <List.Item>\r\n                            <FullWidthTag>\r\n                                <Typography.Text ellipsis={true}>{state.name}</Typography.Text>\r\n                            </FullWidthTag>\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </Descriptions.Item>\r\n        </Descriptions>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {Table, Button, Modal, Space} from 'antd';\r\nimport {ICountry, ILanguage} from \"../interfaces\";\r\nimport {EyeOutlined} from \"@ant-design/icons\";\r\nimport {useQuery} from \"@apollo/client\";\r\nimport {GET_COUNTRIES} from \"../graphql/queries\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {Country} from \"./country\";\r\nimport {Language} from \"./language\";\r\n\r\nexport function Countries() {\r\n    const columns = [\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        }, {\r\n            title: 'Capital',\r\n            dataIndex: 'capital',\r\n            key: 'capital',\r\n        }, {\r\n            title: 'Currency',\r\n            dataIndex: 'currency',\r\n            key: 'currency',\r\n        }, {\r\n            title: 'Languages',\r\n            dataIndex: 'languages',\r\n            key: 'languages',\r\n            render: (languages: ILanguage[]) => (\r\n                <Space>\r\n                    {languages.map(language => <Language key={language.code} {...language}/>)}\r\n                </Space>\r\n            )\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (_: any, country: ICountry) => (\r\n                <Button icon={<EyeOutlined/>} onClick={() => {\r\n                    setCountryCode(country.code);\r\n                    setVisibility(true);\r\n                }}>\r\n                    Preview\r\n                </Button>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const {continent} = useParams<{ continent: string }>();\r\n    const {loading, data = {countries: []}} = useQuery<{ countries: ICountry[] }>(GET_COUNTRIES, {variables: {continent}});\r\n    const [countryCode, setCountryCode] = useState(\"\");\r\n    const [visibility, setVisibility] = useState(false);\r\n\r\n    return (<>\r\n        <Table columns={columns} dataSource={data.countries} loading={loading}/>\r\n        <Modal\r\n            title=\"Country Info\"\r\n            visible={visibility}\r\n            footer={null}\r\n            onCancel={() => setVisibility(false)}\r\n        >\r\n            <Country code={countryCode}/>\r\n        </Modal>\r\n    </>);\r\n}\r\n","import {Header} from \"./header\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Countries} from \"../countries\";\r\nimport {Layout} from \"antd\";\r\nimport React from \"react\";\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst {Content, Footer} = Layout;\r\n\r\nconst FullHeightLayout = styled(Layout)`\r\n    min-height: 100vh;\r\n`;\r\n\r\nconst PaddedContent = styled(Content)`\r\n    padding: 0 50px;\r\n    margin-top: 64px;\r\n    height: 100%;\r\n`;\r\n\r\nconst Background = styled.div`\r\n    padding: 24px;\r\n    min-height: 380px;\r\n`;\r\n\r\nconst CenteredFooter = styled(Footer)`\r\n    text-align: center;\r\n`;\r\n\r\nexport function AppLayout() {\r\n    return (\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n            <FullHeightLayout>\r\n                <Header/>\r\n                <PaddedContent>\r\n                    <Background>\r\n                        <Switch>\r\n                            <Route path=\"/continent/:continent\">\r\n                                <Countries/>\r\n                            </Route>\r\n                            <Route path=\"/\">\r\n                                <Redirect to=\"/continent/AF\"/>\r\n                            </Route>\r\n                        </Switch>\r\n                    </Background>\r\n                </PaddedContent>\r\n                <CenteredFooter>React + Graphql Example</CenteredFooter>\r\n            </FullHeightLayout>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {AppLayout} from \"./components/layout\";\n\n\nfunction App() {\n    return (\n        <AppLayout/>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {ApolloClient, InMemoryCache} from '@apollo/client';\r\n\r\nexport default new ApolloClient({\r\n    uri: 'https://countries.trevorblades.com/',\r\n    cache: new InMemoryCache()\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {ApolloProvider} from '@apollo/client';\nimport client from \"./graphql/client\";\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <App/>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}